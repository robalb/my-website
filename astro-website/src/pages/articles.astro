---
// Component Imports
import BlogPostPreviewGroup from '../components/BlogPostPreviewGroup.astro';
import SharedLayout from '../components/SharedLayout.astro';

let title = 'Articles';
let subtitle = 'A collection of articles, ctf writeups and random thoughts'
let description = 'A collection of articles, ctf writeups and random thoughts'
let permalink = 'https://halb.it/articles/';
let activePage = 'articles';

// Data Fetching: List all Markdown posts in the repo.
let allPosts = await Astro.glob('./posts/*.mdx');
allPosts = allPosts.sort((a, b) => new Date(b.frontmatter.publishDate).valueOf() - new Date(a.frontmatter.publishDate).valueOf());

let allTags = new Set()
let allYears = new Set()

allPosts.forEach(({frontmatter}) => {
  //extract all the tags
  frontmatter.tags?.forEach(t => allTags.add(t))
  //extract all the years
  const year = new Date(frontmatter.publishDate).getFullYear();
  allYears.add(year)
})

const yearGroupFilter = function(year: number){
  return ({frontmatter}) => 
    new Date(frontmatter.publishDate).getFullYear() == year;
}

---
<SharedLayout {title} {description} {permalink} {activePage} >
	<article >
    <header>
        <h1>{title}</h1>
        <p class="description">{subtitle}</p>
    </header>
	<section>
    <div class="tags" aria-controls="all-articles" role="radiogroup" aria-labelledby="filter-label">
        <p id="filter-label" class="visually-hidden">Filter by tags</p>
        {
          Array.from(allTags).map((t: string) => 
          <a href={"#" + t} id={t} role="radio">{t}</a>)
        }
    </div>
  </section>
	<section aria-labelledby="all-articles-title" id="all-articles" >
      <p id="all-articles-title" class="visually-hidden">All articles, filtered by tag</p>
      {
        Array.from(allYears).map((y: number) => 
          <BlogPostPreviewGroup year={y} posts={allPosts.filter(yearGroupFilter(y))} />
        )
      }
	</section>
</article>
	<footer>
	</footer>
</SharedLayout>

<script>
 "use strict";

 let lastHash;

  function runWhenReady(fn) {
    if (document.readyState != 'loading'){
      fn();
    } else {
      document.addEventListener('DOMContentLoaded', fn);
    }
  }

  runWhenReady(updateFilterState)
  window.addEventListener('hashchange', updateFilterState);

  function updateFilterState(){
    let hash = new URL(document.URL).hash
    //remove the # at the beginning of the hash
    if(hash && hash.length > 0)
      hash = hash.substring(1)
    console.log(hash)
    //clear lastHash
    if(lastHash){
      let el = document.getElementById(lastHash)
      if(el){
        el.href = "#" + lastHash
        el.removeAttribute("aria-checked", true)
      }
    }
    //valid hash
    if(isValidTag(hash)){
      let el = document.getElementById(hash)
      if(el){
        el.href = "#"
        el.setAttribute("aria-checked", true)
        lastHash = hash
      }
      applyFilter(hash)
    }
    //invalid hash / no hash selected
    else{
      history.replaceState(null, null, ' ');
      applyFilter("")
    }
  }

  //add / remove hidden class from links based on their data-hash attribute
  function applyFilter(tag){
    let attribute = "data-tag-" + tag
    const articlesContainerDOM = document.getElementById("all-articles")
    const allArticlesDOM = articlesContainerDOM.querySelectorAll(".post")

    allArticlesDOM.forEach(node => {
        //show if there is no filter tag, or the current node has the tag we are filtering by
        if(!tag || node.hasAttribute(attribute))
          node.removeAttribute("aria-hidden")
        else
          node.setAttribute("aria-hidden", true)
      })
  }

  function isValidTag(tag){
    return document.querySelector(`[data-tag-${tag}]`) != undefined
  }
</script>

<style>
	header{
		padding-bottom: 3rem;
	}

  .tags p{
    margin-bottom: 0;
  }

	h2{
		display: flex;
		justify-content: space-between;
    margin-top: 2.5rem;
    border-bottom: 1px solid var(--light-border-color);
	}


  /* Disable hover on these tags, so that they can behave as radio selects */
  .tags a:hover:not([aria-checked="true"]) {
    border: 1px solid var(--light-border-color);
    color: var(--bright-font-color);
    background: var(--reverse);
  }
</style>

